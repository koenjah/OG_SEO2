{{!-- Only contains the content that goes inside the {{{body}}} of main.handlebars --}}
<div class="app-hero">
  <div class="hero-content">
    <h1>SEO rapportage</h1>
    <p>Snel inzicht in je website prestaties</p>
  </div>
</div>

<div class="app-input-container">
  {{!-- Het formulier dat we programmatisch willen submitten --}}
  <form action="/generate-report" method="POST" id="report-form"> {{!-- ID toegevoegd voor makkelijkere selectie --}}
    <input type="hidden" name="visitorId" id="visitorId" value=""> {{!-- Zorg dat deze bestaat --}}
    <div class="app-input-wrapper">
      <div class="input-icon">
        <i class="bi bi-globe"></i>
      </div>
      <input
        type="text"
        class="app-input"
        id="domain"
        name="domain"
        placeholder="Voer je website in..."
        required
        autocomplete="off"
        value="{{prefill.url}}" {{!-- Houd server-side prefill als fallback voor direct bezoek --}}
      >
      <button type="submit" class="app-submit">
        <i class="bi bi-arrow-right"></i>
      </button>
    </div>
    <small class="input-hint">Bijvoorbeeld: jouwwebsite.nl</small>
  </form>
</div>

<div class="app-features-grid">
  <div class="feature-item">
    <i class="bi bi-graph-up"></i>
    <span>Bezoekers</span>
  </div>
  <div class="feature-item">
    <i class="bi bi-search"></i>
    <span>Zoekwoorden</span>
  </div>
  <div class="feature-item">
    <i class="bi bi-shield-check"></i>
    <span>Autoriteit</span>
  </div>
  <div class="feature-item">
    <i class="bi bi-speedometer"></i>
    <span>Snelheid</span>
  </div>
</div>

{{!-- Rate Limit Modal (deze logica blijft ongewijzigd) --}}
{{#if rateLimitMsg}}
  <div class="modal fade premium-modal" id="rateLimitModal" tabindex="-1" aria-labelledby="rateLimitModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
      <div class="modal-content premium-modal-content">
        <div class="modal-header premium-modal-header">
          <div class="premium-header-content">
            <h5 class="modal-title premium-modal-title" id="rateLimitModalLabel">Limiet bereikt</h5>
            <div class="premium-modal-subtitle">Optimaal Groeien SEO Tool</div>
          </div>
          <button type="button" class="btn-close premium-close-button" data-bs-dismiss="modal" aria-label="Sluiten"></button>
        </div>
        <div class="modal-body premium-modal-body">
          <div class="rate-limit-content">
            <div class="rate-limit-image">
              <div class="premium-icon-container">
                <div class="premium-icon">
                  <i class="fas fa-crown"></i>
                </div>
              </div>
            </div>
            <div class="rate-limit-text premium-text">
              {{{rateLimitMsg}}}
            </div>
          </div>
        </div>
        <div class="modal-footer premium-modal-footer">
          <a href="https://calendly.com/optimaalgroeien/kennismaking" target="_blank" class="btn premium-button">Plan een gesprek <i class="fas fa-arrow-right ms-2"></i></a>
        </div>
      </div>
    </div>
  </div>
  {{!-- Script om de rate limit modal te tonen --}}
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      if (typeof bootstrap !== 'undefined' && typeof bootstrap.Modal !== 'undefined') {
        const rateLimitModal = document.getElementById('rateLimitModal');
        if (rateLimitModal) {
          const modal = new bootstrap.Modal(rateLimitModal);
          modal.show();
        } else {
          console.error("Rate limit modal element not found.");
        }
      } else {
         console.error("Bootstrap Modal is niet beschikbaar.");
      }
    });
  </script>
{{/if}}

{{!-- FingerprintJS library --}}
<script src="https://cdn.jsdelivr.net/npm/@fingerprintjs/fingerprintjs@4/dist/fp.min.js"></script>

{{!-- AANGEPAST SCRIPT: Voor automatisch starten bij URL parameter --}}
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const initializeAndCheckDomain = async () => {
      try {
        // 1. Haal Fingerprint ID op en zet het in de hidden input
        let visitorId = '';
        const visitorIdInput = document.getElementById('visitorId');
        if (typeof FingerprintJS !== 'undefined') {
            const fp = await FingerprintJS.load();
            const result = await fp.get();
            visitorId = result.visitorId;
            if (visitorIdInput) {
                visitorIdInput.value = visitorId;
                // console.log("Fingerprint Visitor ID:", visitorId);
            } else {
                console.warn("Hidden input #visitorId niet gevonden!");
            }
        } else {
            console.error("FingerprintJS library niet geladen!");
        }

        // 2. Lees de 'domain' of 'url' parameter uit de browser URL
        const urlParams = new URLSearchParams(window.location.search);
        const domainFromQuery = urlParams.get('url') || urlParams.get('domain');
        // console.log("Domain parameter uit iframe URL:", domainFromQuery);
        
        const domainInput = document.getElementById('domain');

        if (domainFromQuery) {
            // Gebruik het ID dat we aan het formulier hebben toegevoegd
            const reportForm = document.getElementById('report-form');

            if (domainInput && reportForm) {
                const decodedDomain = decodeURIComponent(domainFromQuery);
                domainInput.value = decodedDomain; // Vul de zichtbare input in

                // Controleer of visitorId correct is ingesteld
                if (visitorIdInput && visitorIdInput.value === visitorId) {

                    // ----- Start de animatie handmatig -----
                    let animationStarted = false;
                    if (typeof LoadingAnimation !== 'undefined') {
                        try {
                            // console.log("Animatie handmatig starten voor:", decodedDomain);
                            const loadingAnimation = new LoadingAnimation();
                            const displayDomain = decodedDomain.replace(/^(https?:\/\/)?(www\.)?/i, '');
                            loadingAnimation.init(displayDomain);
                            animationStarted = true;
                        } catch(animError) {
                             console.error("Fout bij starten animatie:", animError);
                        }
                    } else {
                        console.error("LoadingAnimation class is niet beschikbaar! Zorg dat /js/loading-animation.js geladen is VOOR dit script.");
                    }
                    // ----- EINDE Animatie Start -----

                    // Dispatch het submit event pas NADAT de animatie (potentieel) gestart is
                    if (animationStarted) {
                         setTimeout(() => {
                            // console.log(`Dispatching submit event voor ${decodedDomain} met visitor ID ${visitorId}`);
                            // Verstuur het event - dit triggert de listener in loading-animation.js
                            reportForm.dispatchEvent(new Event('submit', { cancelable: true, bubbles: true }));
                        }, 100); // Korte delay zodat animatie kan beginnen te renderen
                    } else {
                         console.error("Submit tegengehouden omdat animatie niet kon starten.");
                    }

                } else {
                    console.error("Visitor ID kon niet correct worden ingesteld vóór submit. Formulier niet automatisch verzonden.");
                }
            } else {
                console.error("Kon domein input (#domain) of formulier (#report-form) niet vinden.");
            }
        } else {
            // console.log("Geen 'domain' of 'url' parameter gevonden, formulier wordt niet automatisch gesubmit.");
            // Vul eventueel de input als de server toch iets heeft doorgegeven (voor direct bezoek)
            const serverPrefill = '{{prefill.url}}'; // Check server-side waarde als fallback
            if (serverPrefill && domainInput) {
                 domainInput.value = serverPrefill;
            }
        }
      } catch (error) {
        console.error("Fout tijdens initialisatie script:", error);
      }
    };

    initializeAndCheckDomain();
  });
</script>